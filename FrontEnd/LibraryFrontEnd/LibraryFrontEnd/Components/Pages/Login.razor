<!-- Abiel & Matthew SD4 Service Orientated Architecture CA2 -->
<!-- Front End -->
<!-- Login Page -->
<!-- Local Storage package for storing JWT token in order to maintain login session -->
<!-- https://www.c-sharpcorner.com/article/using-localstorage-to-cache-data-in-blazor-applications/ -->
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.LocalStorage
@using System.ComponentModel.DataAnnotations

@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>

<!-- Container for login page -->
<div class="login-container">
    <h3 class="login-title">Library Depository</h3>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <!-- login validation component -->
        <!-- https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validation-with-the-data-annotation-validators-cs-->
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group">
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
        </div>

        <div class="input-group">
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
        </div>

        <div class="error-message">
            <span class="text-danger">@errorMessage</span>
        </div>

        <button type="submit" class="btn btn-primary login-btn">Login</button>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        try
        {
            // Localhost Server
            var response = await Http.PostAsJsonAsync("https://localhost:7284/api/Auth/login", loginModel);

            // Deployed Azure Server
            // var response = await Http.GetAsync("https://libraryca2app.azurewebsites.net/api/Auth/login");


            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (loginResponse?.Token != null)
                {
                    await LocalStorage.SetItemAsync("jwtToken", loginResponse.Token);
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = "Invalid credentials, please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}

