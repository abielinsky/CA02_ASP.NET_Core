﻿<!-- Abiel & Matthew SD4 Service Orientated Architecture CA2 -->
<!-- Front End -->
<!-- Books Page -->

@using Blazored.LocalStorage
@using LibraryFrontEnd.Models
@using System.Text.Json;

@page "/books"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Books</PageTitle>

<h3>Books List</h3>

@if (isLoading)
{
    <p>Loading books...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else if (books != null && books.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Copies Available</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.title</td>
                    <td>@book.author</td>
                    <td>@book.isbn</td>
                    <td>@book.copies_available</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No books available or failed to load.</p>
}

@code {
    private List<Book>? books;
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jwtToken = await LocalStorage.GetItemAsync<string>("jwtToken");

            if (!string.IsNullOrEmpty(jwtToken))
            {
                // Add the JWT token to the Authorization header for authentication
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);

                var response = await Http.GetAsync("https://localhost:7284/api/Books");

                if (response.IsSuccessStatusCode)
                {
                    // Deserialize the JSON response into a list of books
                    books = await response.Content.ReadFromJsonAsync<List<Book>>();
                    isAuthenticated = true; // Successfully fetched books, user is authenticated
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // Invalid token or user unauthorized
                    RedirectToLogin();
                }
                else
                {
                    Console.WriteLine("Error: Unable to fetch books.");
                }
            }
            else
            {
                // JWT token is missing, redirect to login
                RedirectToLogin();
            }

            // Set loading to false and trigger a re-render
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        isAuthenticated = false;
        Navigation.NavigateTo("/login", true);
    }
}
