﻿<!-- Abiel & Matthew SD4 Service Orientated Architecture CA2 -->
<!-- Front End -->
<!-- Rentals Page -->

<!-- Local Storage package for storing JWT token in order to maintain login session -->
<!-- https://www.c-sharpcorner.com/article/using-localstorage-to-cache-data-in-blazor-applications/ -->
@using Blazored.LocalStorage
@using LibraryFrontEnd.Models
@using System.Text.Json;

@page "/rentals"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Rentals</PageTitle>

<h3>Rentals List</h3>

@if (isLoading)
{
    <p>Loading Rentals...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else if (rentals != null && rentals.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Rental ID</th>
                <th>User ID</th>
                <th>Book ID</th>
                <th>Rental Date</th>
                <th>Return Date</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rental in rentals)
            {
                <tr>
                    <td>@rental.id</td>
                    <td>@rental.user_id</td>
                    <td>@rental.book_id</td>
                    <td>@rental.rental_date</td>
                    <td>@rental.return_date</td>
                    <td>@rental.status</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No rentals available or failed to load.</p>
}

@code {
    private List<Rental>? rentals;
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jwtToken = await LocalStorage.GetItemAsync<string>("jwtToken");

            if (!string.IsNullOrEmpty(jwtToken))
            {
                // Add the JWT token to the Authorization header for authentication
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);

                // Localhost Server
                var response = await Http.GetAsync("https://localhost:7284/api/Rentals");

                // Deployed Azure Server
                // var response = await Http.GetAsync("https://libraryca2app.azurewebsites.net/api/Rentals");

                if (response.IsSuccessStatusCode)
                {
                    // Deserialize the JSON response into a list of rentals
                    rentals = await response.Content.ReadFromJsonAsync<List<Rental>>();
                    isAuthenticated = true; // Successfully fetched rentals, user is authenticated
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // Invalid token or user unauthorized
                    RedirectToLogin();
                }
                else
                {
                    Console.WriteLine("Error: Unable to fetch rentals.");
                }
            }
            else
            {
                // JWT token is missing, redirect to login
                RedirectToLogin();
            }

            // Set loading to false and trigger a re-render
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        isAuthenticated = false;
        Navigation.NavigateTo("/login", true);
    }
}

