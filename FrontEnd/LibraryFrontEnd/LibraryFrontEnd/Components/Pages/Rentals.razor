@using Blazored.LocalStorage
@using System.Text.Json;

@page "/rentals"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Rentals</PageTitle>

<h3>Rentals List</h3>

@if (isLoading)
{
    <p>Loading Rentals...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else if (rentals != null && rentals.Any())
{
    <ul>
        @foreach (var rental in rentals)
        {
            <li>@rental.rental_date </li>
        }
    </ul>
}
else
{
    <p>No rentals available or failed to load.</p>
}

@code {
    private List<Rental>? rentals;
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jwtToken = await LocalStorage.GetItemAsync<string>("jwtToken");

            if (!string.IsNullOrEmpty(jwtToken))
            {
                // Add the JWT token to the Authorization header for authentication
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);

                var response = await Http.GetAsync("https://localhost:7284/api/Rentals");

                if (response.IsSuccessStatusCode)
                {
                    // Deserialize the JSON response into a list of rentals
                    rentals = await response.Content.ReadFromJsonAsync<List<Rental>>();
                    isAuthenticated = true; // Successfully fetched rentals, user is authenticated
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // Invalid token or user unauthorized
                    RedirectToLogin();
                }
                else
                {
                    Console.WriteLine("Error: Unable to fetch rentals.");
                }
            }
            else
            {
                // JWT token is missing, redirect to login
                RedirectToLogin();
            }

            // Set loading to false and trigger a re-render
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        isAuthenticated = false;
        Navigation.NavigateTo("/login", true);
    }

    public class Rental
    {
        public DateTime rental_date { get; set; }
    }

    public class User
    {
        public string Name { get; set; }
    }

    public class Book
    {
        public string Title { get; set; }
    }
}

